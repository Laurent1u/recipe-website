{"version":3,"sources":["Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","_ref","title","calories","image","ingredients","react_default","a","createElement","className","map","ingredient","index","key","text","src","alt","App","_useState","useState","_useState2","Object","slicedToArray","recipes","setRecipes","_useState3","_useState4","search","setSearch","_useState5","_useState6","query","setQuery","useEffect","asyncToGenerator","regenerator_default","mark","_callee","response","data","wrap","_context","prev","next","fetch","concat","sent","json","hits","stop","apply","this","arguments","getRecipes","id","Search_default","onSubmit","e","preventDefault","style","width","TextField_default","label","type","fullWidth","margin","value","onChange","target","recipe","src_Recipe","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+KAkBeA,SAfA,SAAAC,GAA6C,IAA1CC,EAA0CD,EAA1CC,MAAOC,EAAmCF,EAAnCE,SAAUC,EAAyBH,EAAzBG,MAAOC,EAAkBJ,EAAlBI,YACxC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,UAAKN,GACLI,EAAAC,EAAAC,cAAA,UACGH,EAAYK,IAAI,SAACC,EAAYC,GAAb,OACfN,EAAAC,EAAAC,cAAA,MAAIK,IAAKD,GAAQD,EAAWG,SAGhCR,EAAAC,EAAAC,cAAA,SAAIL,GACJG,EAAAC,EAAAC,cAAA,OAAKO,IAAKX,EAAOY,IAAI,0CCwDZC,SA/DH,WACV,IADgBC,EAIcC,mBAAS,IAJvBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAITK,EAJSH,EAAA,GAIAI,EAJAJ,EAAA,GAAAK,EAKYN,mBAAS,IALrBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAKTE,EALSD,EAAA,GAKDE,EALCF,EAAA,GAAAG,EAMUV,mBAAS,IANnBW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAMTE,EANSD,EAAA,GAMFE,EANEF,EAAA,GAQhBG,oBAAU,YACQ,eAAAhC,EAAAoB,OAAAa,EAAA,EAAAb,CAAAc,EAAA5B,EAAA6B,KAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,EAAA5B,EAAAiC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACMC,MAAK,mCAAAC,OACSd,EADT,YAAAc,OATjB,WASiB,aAAAA,OARhB,qCAOK,cACXP,EADWG,EAAAK,KAAAL,EAAAE,KAAA,EAIEL,EAASS,OAJX,OAIXR,EAJWE,EAAAK,KAKjBtB,EAAWe,EAAKS,MALC,wBAAAP,EAAAQ,SAAAZ,MAAH,yBAAApC,EAAAiD,MAAAC,KAAAC,YAAA,EAQhBC,IACC,CAACtB,IAYJ,OACEzB,EAAAC,EAAAC,cAAA,OAAK8C,GAAG,aACNhD,EAAAC,EAAAC,cAAA,OAAK8C,GAAG,kBACNhD,EAAAC,EAAAC,cAAC+C,EAAAhD,EAAD,MACAD,EAAAC,EAAAC,cAAA,QAAMgD,SAVM,SAAAC,GAChBA,EAAEC,iBACF1B,EAASL,GACTC,EAAU,KAOqB+B,MAAO,CAAEC,MAAO,SACzCtD,EAAAC,EAAAC,cAACqD,EAAAtD,EAAD,CACE+C,GAAG,kBACHQ,MAAM,eACNC,KAAK,SAELC,WAAS,EACTC,OAAO,SACPC,MAAOvC,EACPwC,SAvBW,SAAAV,GACnB7B,EAAU6B,EAAEW,OAAOF,YA2BjB5D,EAAAC,EAAAC,cAAA,OAAK8C,GAAG,kBACL/B,EAAQb,IAAI,SAAC2D,EAAQzD,GAAT,OACXN,EAAAC,EAAAC,cAAC8D,EAAD,CACEzD,IAAKD,EACLV,MAAOmE,EAAOA,OAAOP,MACrB3D,SAAUkE,EAAOA,OAAOlE,SACxBC,MAAOiE,EAAOA,OAAOjE,MACrBC,YAAagE,EAAOA,OAAOhE,oBCjDnBkE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvE,EAAAC,EAAAC,cAACsE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9532233d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./recipe.css\";\r\n\r\nconst Recipe = ({ title, calories, image, ingredients }) => {\r\n  return (\r\n    <div className=\"recipe\">\r\n      <h1>{title}</h1>\r\n      <ol>\r\n        {ingredients.map((ingredient, index) => (\r\n          <li key={index}>{ingredient.text}</li>\r\n        ))}\r\n      </ol>\r\n      <p>{calories}</p>\r\n      <img src={image} alt=\"\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipe;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Recipe from \"./Recipe\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  const APP_ID = \"eeabe6b3\";\r\n  const APP_KEY = \"7c6608d08ae22f8d82e0ec6f9c347577\";\r\n\r\n  const [recipes, setRecipes] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const getRecipes = async () => {\r\n      const response = await fetch(\r\n        `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\r\n      );\r\n      const data = await response.json();\r\n      setRecipes(data.hits);\r\n    };\r\n\r\n    getRecipes();\r\n  }, [query]);\r\n\r\n  const updateSearch = e => {\r\n    setSearch(e.target.value);\r\n  };\r\n\r\n  const getSearch = e => {\r\n    e.preventDefault();\r\n    setQuery(search);\r\n    setSearch(\"\");\r\n  };\r\n\r\n  return (\r\n    <div id=\"container\">\r\n      <div id=\"section-search\">\r\n        <Search />\r\n        <form onSubmit={getSearch} style={{ width: \"100%\" }}>\r\n          <TextField\r\n            id=\"standard-search\"\r\n            label=\"Search Field\"\r\n            type=\"search\"\r\n            //className={}\r\n            fullWidth\r\n            margin=\"normal\"\r\n            value={search}\r\n            onChange={updateSearch}\r\n          />\r\n        </form>\r\n      </div>\r\n\r\n      <div id=\"section-recipe\">\r\n        {recipes.map((recipe, index) => (\r\n          <Recipe\r\n            key={index}\r\n            title={recipe.recipe.label}\r\n            calories={recipe.recipe.calories}\r\n            image={recipe.recipe.image}\r\n            ingredients={recipe.recipe.ingredients}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}